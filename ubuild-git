#!/bin/sh -e

usage() {
    echo "ubuild-git <distro> <buildarch> <suite> <package> <version> [host|target <arch>]"
}

# FIXME
OUT_DIR=$(pwd)/out

if [ $# -lt 5 ] || [ $# -gt 7 ]; then
    usage
    exit 1
fi

DISTRO="$1"
BUILDARCH="$2"
SUITE="$3"
PACKAGE="$4"
VERSION="$5"
MODE="$6"
ARCH="$7"

CONFIGURATION="$DISTRO-$BUILDARCH-$SUITE"

[ -f ubuild.conf ] && . ./ubuild.conf && PATH=$(pwd):$PATH || . /etc/ubuild/ubuild.conf

in_line_list() {
    echo "$1" | (
        while read list_item; do
            if [ "$2" = "$list_item" ]; then
                return 0
            fi
        done
        return 1)
}

checkout() {
    URI="$1"
    TAG="$2"
    DIR="$3"

    mkdir -p "$DIR"
    (cd "$DIR"
        git init -q
        git remote add origin "$URI"
        git fetch -q origin
        git checkout -q -b build "refs/tags/$TAG")
}

control_field() {
    sed -e '/^$/Q' < "$1/debian/control" | grep "^$2: " | cut -d' ' -f2-
}

changelog_last_field() {
    dpkg-parsechangelog -l"$1/debian/changelog" | grep "^$2: " | cut -d' ' -f2-
}

detect_mode() {
    DIR="$1"
    if [ x$(control_field "$DIR" XCS-Cross-Mode) = "xboth" ]; then
        echo "Unable to detect build mode: package is ambivalent" >&2
        exit 1
    fi
    if [ x$(control_field "$DIR" Section) = "xhost/tools" ]; then
        echo "host"
    else
        echo "target"
    fi
}

case "$MODE" in
    host)
        if [ -n "$ARCH" ]; then
            usage
            exit 1
        fi
        ;;
    target|"")
        ;;
    *)
        usage
        exit 1
        ;;
esac

URI="$GIT_BASE$PACKAGE$GIT_SUFFIX"
TAG="$SUITE/$VERSION"

TMPDIR=$(mktemp -d)
cleanup() {
    RET=$?
    rm -rf "$TMPDIR"
    return $RET
}
#trap cleanup 0 INT TERM QUIT

SRC_DIR="$TMPDIR/build"

checkout "$URI" "$TAG" "$SRC_DIR"

if ! UIDS=$(ubuild-check-tag "$CONFIGURATION" "$SRC_DIR" "$TAG"); then
    exit 1
fi

if [ -z "$MODE" ]; then
    if ! MODE=$(detect_mode "$SRC_DIR"); then
        exit 1
    fi
fi

if [ "x$MODE" = "xtarget" ] && [ -z "$ARCH" ]; then
    echo "No architecture specified"
    exit 1
fi

SRC_NAME=$(changelog_last_field "$SRC_DIR" Source)
SRC_VERSION=$(changelog_last_field "$SRC_DIR" Version)
SRC_SUITE=$(changelog_last_field "$SRC_DIR" Distribution)
SRC_MAINTAINER=$(changelog_last_field "$SRC_DIR" Maintainer)

#
# Sanity checks
#

if [ "$PACKAGE" != "$SRC_NAME" ]; then
    echo "Repository name ($PACKAGE) != source package name ($SRC_NAME)."
    exit 1
fi

if [ "$VERSION" != "$SRC_VERSION" ]; then
    echo "Tagged version ($VERSION) != source package version ($SRC_VERSION)."
    exit 1
fi

if [ "$SUITE" != "$SRC_SUITE" ]; then
    echo "Tagged suite ($SUITE) != source package suite ($SRC_SUITE)."
    exit 1
fi

if ! in_line_list "$UIDS" "$SRC_MAINTAINER"; then
    echo "Source package maintainer ($SRC_MAINTAINER) is not amongst the tagger uids:\n$UIDS\n"
    exit 1
fi

if [ -z $ARCH ]; then
    FULLMODE=$MODE
else
    FULLMODE=$MODE:$ARCH
fi

ubuild "$CONFIGURATION" "$SRC_DIR" "$FULLMODE" "$OUT_DIR"
