#!/usr/bin/python

#
# Local toolchain builder.
#
# This script is used to test that local builder code is functioning properly,
# and not as the official way to build toolchains.
#

from path import path
from ubuild.build import Repository, Environment, Source, BuildOptions
from ubuild.worker.task import run_task
from subprocess import check_call, Popen, PIPE

BASE=path('/home/dottedmag/oi/is/ubuild/base')

dr = Repository('http://localhost:9999/debian/', 'lenny', ['main', 'contrib', 'non-free'])
ir = Repository('http://ftp.iplinux.org/iplinux/', 'zelazny', ['host/tools', 'host/cross'])
r1 = Repository('file:' + BASE + '/repo1', './')
r2 = Repository('file:' + BASE + '/repo2', './')
r3 = Repository('file:' + BASE + '/repo3', './')

e = Environment('iplinux-zelazny-amd64', [dr, ir], 'amd64')
e1 = Environment('iplinux-zelazny-amd64-e1', [dr, ir, r1], 'amd64')
e2 = Environment('iplinux-zelazny-amd64-e2', [dr, ir, r2], 'amd64')
e3 = Environment('iplinux-zelazny-amd64-e3', [dr, ir, r3], 'amd64')

def build_binutils(arch):
    s = Source('git://git.iplinux.org/binutils-host.git', 'zelazny/2.19.91.20091006-2', [arch])
    bo = BuildOptions(False, None, None)
    return run_task(BASE, 1, e, s, bo)

def build_lld(arch):
    s = Source('git://git.iplinux.org/linux-libc-dev.git', 'zelazny/2.6.34-1')
    bo = BuildOptions(False, arch, arch)
    return run_task(BASE, 2, e1, s, bo)

def build_glibc_bs1(arch):
    s = Source('git://git.iplinux.org/glibc.git', 'zelazny/2.7-16.ip11', ['dev-headers'])
    bo = BuildOptions(False, arch, arch)
    return run_task(BASE, 3, e1, s, bo)

def build_gcc_bs1(arch):
    s = Source('git://git.iplinux.org/gcc-4.3.git', 'zelazny/4.3.2-1.ip4', [arch, 'bootstrap'])
    bo = BuildOptions(False, None, arch)
    return run_task(BASE, 4, e1, s, bo)

def build_glibc_bs2(arch):
    s = Source('git://git.iplinux.org/glibc.git', 'zelazny/2.7-16.ip11', ['bootstrap'])
    bo = BuildOptions(False, arch, arch)
    return run_task(BASE, 5, e2, s, bo)

def build_gcc(arch):
    s = Source('git://git.iplinux.org/gcc-4.3.git', 'zelazny/4.3.2-1.ip4', [arch, 'final'])
    bo = BuildOptions(False, None, arch)
    return run_task(BASE, 6, e2, s, bo)

def build_glibc(arch):
    s = Source('git://git.iplinux.org/glibc.git', 'zelazny/2.7-16.ip11', ['final'])
    bo = BuildOptions(False, arch, arch)
    return run_task(BASE, 7, e3, s, bo)

def populate_repo(num, changefiles):
    r = BASE / 'repo' + str(num)
    for cf in changefiles:
        check_call(['dcmd', 'cp', cf, r])
    sp = Popen(['dpkg-scanpackages', '.', '/dev/null'], cwd=r, stdout=PIPE)
    (stdout, stderr) = sp.communicate()
    with open(r / 'Packages', 'w') as fh:
        fh.write(stdout)

if __name__ == '__main__':
    for i in range(1, 8):
        (BASE / 'tasks/' + str(i)).rmtree(True)

    for i in range(1, 5):
        (BASE / 'repo' + str(i)).rmtree(True)
        (BASE / 'repo' + str(i)).makedirs_p(0755)

    binutils = build_binutils('armel')

    populate_repo(1, [binutils])

    lld = build_lld('armel')

    populate_repo(1, [lld])

    glibc_bs1 = build_glibc_bs1('armel')

    populate_repo(1, [glibc_bs1])

    gcc_bs1 = build_gcc_bs1('armel')

    populate_repo(2, [binutils, lld, gcc_bs1])

    glibc_bs2 = build_glibc_bs2('armel')

    populate_repo(2, [glibc_bs2])

    gcc = build_gcc('armel')

    populate_repo(3, [binutils, lld, gcc, glibc_bs2])

    glibc = build_glibc('armel')

    populate_repo(4, [binutils, lld, gcc, glibc])

